// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CommentInfo interface {
	IsCommentInfo()
	GetLastAuthorNote() NoteItem
}

type Item interface {
	IsItem()
	GetID() string
}

type NoteItem interface {
	IsNoteItem()
	GetUser() UserInfo
}

type Post interface {
	IsPost()
	GetID() string
	GetCommentInfo() CommentInfo
}

type PostInfo interface {
	IsPostInfo()
	GetID() string
	GetCommentInfo() CommentInfo
}

type UserInfo interface {
	IsUserInfo()
	GetID() string
}

type ASimplePost struct {
	ID          string      `json:"id"`
	CommentInfo CommentInfo `json:"commentInfo,omitempty"`
}

func (ASimplePost) IsPost()                          {}
func (this ASimplePost) GetID() string               { return this.ID }
func (this ASimplePost) GetCommentInfo() CommentInfo { return this.CommentInfo }

func (ASimplePost) IsPostInfo() {}

func (ASimplePost) IsItem() {}

func (ASimplePost) IsEntity() {}

type AnotherPost struct {
	ID          string      `json:"id"`
	CommentInfo CommentInfo `json:"commentInfo,omitempty"`
}

func (AnotherPost) IsPost()                          {}
func (this AnotherPost) GetID() string               { return this.ID }
func (this AnotherPost) GetCommentInfo() CommentInfo { return this.CommentInfo }

func (AnotherPost) IsPostInfo() {}

func (AnotherPost) IsItem() {}

type Identity struct {
	ID             string          `json:"id"`
	DownvotedPosts *PostConnection `json:"downvotedPosts,omitempty"`
	UpvotedPosts   *PostConnection `json:"upvotedPosts,omitempty"`
}

func (Identity) IsEntity() {}

type ItemConnection struct {
	Edges []*ItemEdge `json:"edges"`
}

type ItemEdge struct {
	Node Item `json:"node,omitempty"`
}

type PostConnection struct {
	Edges []*PostEdge `json:"edges"`
}

type PostEdge struct {
	Node Post `json:"node,omitempty"`
}

type Query struct {
}

type UnavailableUser struct {
	ID string `json:"id"`
}

func (UnavailableUser) IsUserInfo()        {}
func (this UnavailableUser) GetID() string { return this.ID }

func (UnavailableUser) IsEntity() {}

type User struct {
	ID       string          `json:"id"`
	Elements *ItemConnection `json:"elements,omitempty"`
}

func (User) IsUserInfo()        {}
func (this User) GetID() string { return this.ID }

func (User) IsEntity() {}

type TimeRange string

const (
	TimeRangeAll   TimeRange = "ALL"
	TimeRangeHour  TimeRange = "HOUR"
	TimeRangeDay   TimeRange = "DAY"
	TimeRangeWeek  TimeRange = "WEEK"
	TimeRangeMonth TimeRange = "MONTH"
	TimeRangeYear  TimeRange = "YEAR"
)

var AllTimeRange = []TimeRange{
	TimeRangeAll,
	TimeRangeHour,
	TimeRangeDay,
	TimeRangeWeek,
	TimeRangeMonth,
	TimeRangeYear,
}

func (e TimeRange) IsValid() bool {
	switch e {
	case TimeRangeAll, TimeRangeHour, TimeRangeDay, TimeRangeWeek, TimeRangeMonth, TimeRangeYear:
		return true
	}
	return false
}

func (e TimeRange) String() string {
	return string(e)
}

func (e *TimeRange) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimeRange(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimeRange", str)
	}
	return nil
}

func (e TimeRange) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
